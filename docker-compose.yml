version: "3.9"

services:
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - '8000:8000'
    volumes:
      - ./app/:/app
      - dev-static-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db && 
             python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=kalman
      - DEBUG=1
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - ./dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=kalman
    ports:
      - '5432:5432'
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 5672:5672
      - 15672:15672
  #    networks:
  #      - ttmet-net

#  ftp_checker:
#    build:
#      context: ./data_retrieval/ftp_checker/
#      dockerfile: Dockerfile
#    restart: always
#    depends_on:
#      - rabbitmq
#    environment:
#      - RABBITMQ_HOST=rabbitmq
#      - RABBITMQ_PORT=5672
#      - FTP_CHECKER_SVC=localhost
#      - FTP_CHECKER_PORT=5000
#
#    ports:
#      - 5021:5000
#    networks:
#      - mynet

# dummy ftp server to create a demo

  ftp_server:
    build: j_data/ftp/
    ports:
      - '200-201:20-21/tcp'
      - '40000-40009:40000-40009/tcp'
    volumes:
#      - '/home/knn/Desktop/Test_Data/:/data/'
      - '/media/knn/New Volume/Test_Data/:/data/'



volumes:
  dev-static-data:

# define network if necessary
#networks:
#  ttmet-net:
#    driver: bridge