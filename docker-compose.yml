version: "3.9"

services:
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - '8000:8000'
    volumes:
      - ./app/:/app
      - dev-static-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db && 
             python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/health-check" ]
      interval: 30s
      timeout: 10s
      retries: 5

    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=kalman
      - MONGO_HOST=mongodb
      - DEBUG=1
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
      - mongodb

  geoserver:
    build:
      context: ./j_data/geoserver/
      args:
        - GEOSERVER_VERSION=2.22.0
        - CORS_ENABLED=true
        - CORS_ALLOWED_METHODS=GET,POST,PUT,HEAD,OPTIONS
    ports:
      - "8080:8080"
    environment:
      - INSTALL_EXTENSIONS=true
      - STABLE_EXTENSIONS=wps,csw
      - EXTRA_JAVA_OPTS=-Xms1G -Xmx2G
      - GEOSERVER_ADMIN_USER=admin
      - GEOSERVER_ADMIN_PASSWORD=geoserver
      - DGEOSERVER_CSRF_DISABLED=true
    volumes:
      - ./j_data/geoserver_data:/opt/geoserver_data
      - ./j_data/additional_libs:/opt/additional_libs # by mounting this we can install libs from host on startup
    depends_on:
      - db

  db:
    build:
      context: ./db/
      dockerfile: Dockerfile
    volumes:
      - ./dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=kalman
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis
    #    command: >
    #      sh -c "bash /home/postgis.sh"
    ports:
      - '5432:5432'

  db_admin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: demo@demo.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - db
    ports:
      - "5050:80"

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"

  ftp_checker:
    build:
      context: ./data_retrieval/ftp_checker/
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq
      - app
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - FTP_CHECKER_SVC=localhost
      - FTP_CHECKER_PORT=5000
      - CORE_APP=app
      - DEBUG_MODE=False
      - TOKEN=${TOKEN}

    command: >
      sh -c "bash /app/initiator.sh"
    ports:
      - "5021:5000"

  # dummy ftp server to create a demo
  ftp_server:
    build: j_data/ftp/
    environment:
      - LOGSTASH_HOST=logstash
    ports:
      - '20-21:20-21/tcp'
      - '40000-40009:40000-40009/tcp'
    volumes:
      - '/media/knn/New Volume/Test_Data/:/data/'

  data_downloader:
    build:
      context: ./data_retrieval/file_downloader/
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq
      - app
      - ftp_server
      - ftp_checker
      - db
      - mongodb
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - DATA_DOWNLOADER_SVC=localhost
      - DATA_DOWNLOADER_PORT=5000
      - CORE_APP=app
      - TOKEN=${TOKEN}
      - MONGODB=mongodb
      - FILE_AGE_LIMIT=111 # minutes

    ports:
      - "5020:5000"

  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_DATABASE: data
      DATA_ROOT: /data/db
    volumes:
      - ./dev-mongo-data:/data/db
    ports:
      - "27017:27017"

  mongo-express:
    # admin pass
    image: mongo-express:latest
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass

  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - "1025:1025" # smtp server
      - "8025:8025" # web ui

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.1
    volumes:
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  health-checker:
    build: ./management-dashboard/ws-server
    ports:
      - "4000:4000"
    environment:
      PGADMIN_URL: 'http://db_admin:80/misc/ping'
      MONGOEXPRESS_URL: 'http://mongo-express:8081'
      ELASTICSEARCH_URL: 'http://elasticsearch:9200/_cluster/health'
      GEOSERVER_URL: 'http://geoserver:8080/geoserver/rest/about/status'
      RABBITMQ_URL: 'http://rabbitmq:15672/api/overview'
  #    depends_on:
  #      - db_admin
  #      - mongo-express
  #      - elasticsearch
  #      - geoserver
  #      - rabbitmq
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana

  node-exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"

  elasticsearch-exporter:
    image: justwatch/elasticsearch_exporter:latest
    ports:
      - "9114:9114"
    environment:
      - ES_URI=http://elasticsearch:9200

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    ports:
      - "9419:9419"
    environment:
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RABBIT_URL: http://rabbitmq:15672

  pgadmin-exporter:
    build:
      context: ./prometheus/pgadmin-exporter
      dockerfile: Dockerfile
    ports:
      - "9101:9101"

  mongodb-exporter:
    image: bitnami/mongodb-exporter
    ports:
      - "9216:9216"
    environment:
      - MONGODB_ROOT_PASSWORD=root
      - MONGODB_USERNAME=root
      - MONGODB_URI=mongodb://root:root@mongodb:27017/admin
    depends_on:
      - mongodb

  geoserver-exporter:
    build: ./prometheus/geoserver-exporter
    ports:
      - "9103:9103"

  mongoexpress-exporter:
    build: ./prometheus/mongoexpress-exporter
    ports:
      - "9104:9104"

  watch_aoi:
    build: scripts/watch_directory/
    container_name: watch_aoi
    environment:
      - DIRECTORY_TO_WATCH=/watch/aoi
      - DIRECTORY_TO_UPDATE=aoi
      - GEOSERVER_URL=http://geoserver:8080/geoserver
      - WORKSPACE=tmet
      - COVERAGESTORE=tmet
      - USERNAME=admin
      - PASSWORD=geoserver
    volumes:
      - /home/knn/Desktop/d_f_m/j_data/geoserver_data/data/aoi:/watch/aoi

  watch_rgb:
    build: scripts/watch_directory/
    container_name: watch_rgb
    environment:
      - DIRECTORY_TO_WATCH=/watch/rgb
      - DIRECTORY_TO_UPDATE=rgb
      - GEOSERVER_URL=http://geoserver:8080/geoserver
      - WORKSPACE=tmet
      - COVERAGESTORE=rgb
      - USERNAME=admin
      - PASSWORD=geoserver
    volumes:
      - /home/knn/Desktop/d_f_m/j_data/geoserver_data/data/rgb:/watch/rgb

  watch_cloud:
    build: scripts/watch_directory/
    container_name: watch_cloud
    environment:
      - DIRECTORY_TO_WATCH=/watch/cloud
      - DIRECTORY_TO_UPDATE=cloud
      - GEOSERVER_URL=http://geoserver:8080/geoserver
      - WORKSPACE=tmet
      - COVERAGESTORE=cloud
      - USERNAME=admin
      - PASSWORD=geoserver
    volumes:
      - /home/knn/Desktop/d_f_m/j_data/geoserver_data/data/cloud:/watch/cloud

  mongodb_poller:
    build: check_mongo/
    container_name: mongodb_poller
    environment:
      - MONGODB=mongodb
    volumes:
      - /home/knn/Desktop/d_f_m/j_data/geoserver_data/data/:/watch/data
    depends_on:
      - mongodb

volumes:
  dev-static-data:
  grafana-storage:

# define network if necessary
networks:
  ttmet-net:
    driver: bridge
  gitea:
    external: false

