version: "3.9"

services:
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - '8000:8000'
    volumes:
      - ./app/:/app
      - dev-static-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db && 
             python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=kalman
      - MONGO_HOST=mongodb
      - DEBUG=1
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
      - mongodb

  db:
    image: postgres:13-alpine
    volumes:
      - ./dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=kalman
    ports:
      - '5432:5432'
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 5672:5672
      - 15672:15672

  ftp_checker:
    build:
      context: ./data_retrieval/ftp_checker/
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq
      - app
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - FTP_CHECKER_SVC=localhost
      - FTP_CHECKER_PORT=5000
      - CORE_APP=app
      - DEBUG_MODE=False
      - TOKEN=${TOKEN}

    command: >
      sh -c "bash /app/initiator.sh"
    ports:
      - 5021:5000


  # dummy ftp server to create a demo

  ftp_server:
    build: j_data/ftp/
    ports:
      - '20-21:20-21/tcp'
      - '40000-40009:40000-40009/tcp'
    volumes:
      - '/media/knn/New Volume/Test_Data/:/data/'

  data_downloader:
    build:
      context: ./data_retrieval/file_downloader/
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - rabbitmq
      - app
      - ftp_server
      - ftp_checker
      - db
      - mongodb
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - DATA_DOWNLOADER_SVC=localhost
      - DATA_DOWNLOADER_PORT=5000
      - CORE_APP=app
      - TOKEN=${TOKEN}
      - MONGODB=mongodb
      - FILE_AGE_LIMIT=111 # minutes

    ports:
      - 5020:5000


  mongodb:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_DATABASE: data
      DATA_ROOT: /data/db
    volumes:
      - ./dev-mongo-data:/data/db
    ports:
      - 27017:27017

  mongo-express:
    # admin pass
    image: mongo-express:latest
    restart: always
    ports:
      - 8081:8081
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017

  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui

  redis:
    image: redis:latest
    ports:
      - 6379:6379

#  gitserver:
#    image: gitea/gitea:latest
#    container_name: gitserver
#    ports:
#      - '3000:3000'
#      - '222:22'
#    volumes:
#      - '.gitserver/git_data:/data/'
#      - '/etc/timezone:/etc/timezone:ro'
#      - '/etc/localtime:/etc/localtime:ro'
#    environment:
#      - USER_UID=1000
#      - USER_GID=1000
#      - GITEA__database__DB_TYPE=mysql
#      - GITEA__database__HOST=gitdb:3306
#      - GITEA__database__NAME=gitea
#      - GITEA__database__USER=gitea
#      - GITEA__database__PASSWD=gitea
#      - GITEA__REPOSITORY__ENABLE_PUSH_CREATE_USER=true
#    restart: always
#    depends_on:
#      - gitdb

#
#  gitdb:
#    image: mysql
#    restart: always
#    environment:
#      - MYSQL_ROOT_PASSWORD=gitea
#      - MYSQL_USER=gitea
#      - MYSQL_PASSWORD=gitea
#      - MYSQL_DATABASE=gitea
#    volumes:
#      - .gitserver/db/mysql:/var/lib/mysql
#    ports:
#      - 3306:3306



volumes:
  dev-static-data:

# define network if necessary
networks:
  ttmet-net:
    driver: bridge
  gitea:
    external: false

